Write a function that takes in an array of integers and returns a sorted version of that array.
Use the Heap Sort algorithm to sort the array.
Sample input: [8, 5, 2, 9, 5, 6, 3]
Sample output: [2, 3, 5, 5, 6, 8, 9]

[7,1,3,9]
first swap, the top element with the last idx
siftDown 
main(array) 
  let maxHeap = new MaxHeap(array)
  return maxHeap.sort()
  
  
  class MaxHeap{
    constructor(array){
      this.heap = this.buildMaxHeap(array)
    }
    
    buildMaxHeap(array){}
    
    sort(){
      let startIdx = 0
      let endIdx = this.heap.length - 1
      while(startIdx < endIdx){
        swap(startIdx,endIdx,this.heap)
        endIdx--
        this.shiftDown(startIdx, endIdx, this.heap)
      }
      
      return this.heap
    }
    
    this.siftDown(startIdx, endIdx, array){}
    
  }




function heapSort(array){
  let maxHeap = new MaxHeap(array)
  return maxHeap.sort()
}

// parent = Math.floor(idx - 1 / 2)
// ChildOne = idx * 2 + 1
// ChildTwo = idx * 2 + 2
class MaxHeap{
  constructor(array){
    this.heap = this.buildHeap(array)
  }
  
  buildHeap(array) {
   let parentIdx = Math.floor(array.length - 2 / 2)
   for(let i = parentIdx; i >= 0; i--){
    this.siftDown(i,array.length - 1, array)
   }
   return array
  }
  
  siftDown(idx, lastIdx, array){
    let childOneIdx = idx * 2 + 1
    while(childOneIdx <= lastIdx){
      let childTwoIdx = idx * 2 + 2 <= lastIdx ?  idx * 2 + 2 : -1 
      let maxChild;
      if(childTwoIdx !== -1 && array[childTwoIdx] > array[childOneIdx]){
        maxChild = childTwoIdx
      }else {
        maxChild = childOneIdx 
      }
      
      if(array[maxChild] > array[idx]){
        this.swap(maxChild,idx,array)
        idx = maxChild
        childOneIdx = idx * 2 + 1
      }else {
        return
      }
    }
  }
  
  swap(i, j, array){
    let temp = array[i]
    array[i] = array[j]
    array[j] = temp
  }
  
  
  sort(){
    let startIdx = 0
    let endIdx = this.heap.length - 1
    while(startIdx < endIdx){
      this.swap(startIdx,endIdx, this.heap)
      endIdx--
      this.siftDown(startIdx,endIdx,this.heap)
    }
    return this.heap
  }
  
}






function heapSort(array){
  buildMinHeap(array)
  for(let i = 1; i < array.length; i++){
    siftDown(i, array.length - 1, array)
  }
  return array
}
// Parent = Math.floor(idx - 1 / 2)
// ChildOne = idx * 2 + 1
// ChildTwo = idx * 2 + 2

function swap(i, j, array){
  let temp = array[i]
  array[i] = array[j]
  array[j] = temp
}

function buildMinHeap(array){
  let lastParent = Math.floor(array.length - 2 / 2)
  for(let i = lastParent ; i >= 0; i--){
      siftDown(i,array.length - 1, array)
  }
  return array
}

function siftDown(idx, lastIdx, array){
  let childOneIdx = idx * 2 + 1
  while(childOneIdx <= lastIdx){
    let childTwoIdx = idx * 2 + 2 <= lastIdx ? idx * 2 + 2 : -1
    let minChild
    if(childTwoIdx !== -1 && array[childTwoIdx] < array[childOneIdx]){
      minChild = childTwoIdx
    }else {
      minChild = childOneIdx
    }
    
    if(array[minChild] < array[idx]){
      swap(minChild,idx,array)
      idx = minChild
      childOneIdx = idx * 2 + 1
    }else {
      return 
    }
    
  }
}
















































